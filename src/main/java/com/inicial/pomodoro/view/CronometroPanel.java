/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.inicial.pomodoro.view;

import com.inicial.pomodoro.model.CronometroEvent;
import com.inicial.pomodoro.model.Step;
import com.inicial.pomodoro.model.StepEventInterface;
import com.inicial.pomodoro.model.StepInterface;
import com.inicial.pomodoro.model.TimeEventInterface;
import com.inicial.pomodoro.model.Timer;
import com.inicial.pomodoro.model.TimerInterface;
import javax.swing.JOptionPane;

/**
 *
 * @author myhouse
 */
public class CronometroPanel extends javax.swing.JPanel {
    
    private TimerInterface cronometro;
    private StepInterface step;
    private CronometroEvent cronometroEvent;
    
    private boolean stepPlayed = true;
    private boolean stepPaused = false;
    private boolean stepLongPaused = false;
    
    public static int TIMESTEP = 25;
    public static int TIMEPAUSE = 5;
    public static int TIMELONGPAUSE = 30;
    
    private int MINUTE = 60;

    /**
     * Creates new form CronometroView
     */
    public CronometroPanel() {
        initComponents();
        step = new Step();
        step.setNumber(lbStepNumber);
        step.setStatus(lbStepStatus);
        step.addListener(stepEventListener());
    }
    
    public void addCronometroListener(CronometroEvent cronometroEvent) {
        this.cronometroEvent = cronometroEvent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showTimer = new javax.swing.JLabel();
        btnPlayPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnNextStep = new javax.swing.JButton();
        lbStepNumber = new javax.swing.JLabel();
        btnReset = new javax.swing.JButton();
        lbStepStatus = new javax.swing.JLabel();
        stepProgress = new javax.swing.JProgressBar();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        showTimer.setFont(new java.awt.Font("DejaVu Sans", 1, 80)); // NOI18N
        showTimer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        showTimer.setText("00:00");

        btnPlayPause.setText("Play");
        btnPlayPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayPauseActionPerformed(evt);
            }
        });

        btnStop.setText("Stop");
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        btnNextStep.setText("Next");
        btnNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextStepActionPerformed(evt);
            }
        });

        lbStepNumber.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        lbStepNumber.setText("1");

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lbStepStatus.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        lbStepStatus.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbStepStatus.setText("Step");
        lbStepStatus.setToolTipText("");
        lbStepStatus.setFocusTraversalPolicyProvider(true);

        stepProgress.setMaximum(4);
        stepProgress.setValue(1);
        stepProgress.setMaximumSize(new java.awt.Dimension(10, 20));
        stepProgress.setPreferredSize(new java.awt.Dimension(10, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNextStep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stepProgress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbStepStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbStepNumber)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addComponent(showTimer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPlayPause, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(btnStop, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbStepNumber)
                    .addComponent(lbStepStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(showTimer)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPlayPause)
                    .addComponent(btnStop)
                    .addComponent(btnReset))
                .addGap(6, 6, 6)
                .addComponent(btnNextStep)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextStepActionPerformed
        if(cronometro == null){
            JOptionPane.showMessageDialog(null, "É necessário iniciar o cronometro.");
            return;
        }
        
        if(stepPlayed) {
            cronometroEvent.onNextStep();
        }
        
        resetCronometro(cronometro, evt);
    }//GEN-LAST:event_btnNextStepActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        if(cronometro == null){
            JOptionPane.showMessageDialog(null, "É necessário iniciar o cronometro.");
            return;
        }
        cronometro.stop();
        cronometro = null;
        this.btnPlayPause.setText("Play");
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnPlayPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayPauseActionPerformed
        if (cronometro == null) {
            cronometro = new Timer(this.showTimer);
            cronometro.addListener(cronometroEventListener(evt));
            cronometro.start();
            this.btnPlayPause.setText("Pause");
        } else {
            if(cronometro.isPaused()) {
                cronometro.resume();
                this.btnPlayPause.setText("Pause");
            }
            else {
                cronometro.pause();
                this.btnPlayPause.setText("Play");
            }
        }
        
    }//GEN-LAST:event_btnPlayPauseActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        if(cronometro == null){
            JOptionPane.showMessageDialog(null, "É necessário iniciar o cronometro.");
            return;
        }
        if(!cronometro.isPaused()) {
            btnPlayPauseActionPerformed(evt);
        }
        resetAll();
    }//GEN-LAST:event_btnResetActionPerformed

    private TimeEventInterface cronometroEventListener(java.awt.event.ActionEvent evt)
    {
        return new TimeEventInterface() {
                @Override
                public void onChange(Timer timer, int contador) {
                    if (stepPaused) {
                        if(isPause(contador)) resetCronometro(timer, evt);
                    } else if(stepPlayed) {
                        if(isStep(contador)) btnNextStepActionPerformed(evt);
                    } else if(stepLongPaused) {
                        if (isLongPause(contador)) {
                            step.reset();
                        }
                    }
                }
            };
    }
    
    private StepEventInterface stepEventListener()
    {
        return new StepEventInterface() {
            @Override
            public void onChange(String status, int contStep, int contPause) {
                if(status.equals(Step.STEP)) {
                    changeValuesOfConfigCronometro(true, false, false);
                } else if(status.equals(Step.PAUSE)) {
                    changeValuesOfConfigCronometro(false, true, false);
                } else if(status.equals(Step.LONGPAUSE)) {
                    changeValuesOfConfigCronometro(false, false, true);
                }
                stepProgress.setValue(contStep+1);
            }
        };
    }
    
    private void resetCronometro(TimerInterface timer, java.awt.event.ActionEvent evt)
    {
        btnPlayPauseActionPerformed(evt);
        btnPlayPauseActionPerformed(evt);
        timer.reset();
        step.nextStep();
    }
    
    private void changeValuesOfConfigCronometro(boolean play, boolean pause, boolean longPause)
    {
        this.stepPlayed = play;
        this.stepPaused = pause;
        this.stepLongPaused = longPause;
    }
    
    private void resetAll()
    {
        cronometro.reset();
        step.reset();
        changeValuesOfConfigCronometro(true, false, false);
        stepProgress.setValue(1);
    }
    
    private boolean isPause(int contador)
    {
        return contador == (TIMEPAUSE * MINUTE);
    }
    
    private boolean isStep(int contador)
    {
        return contador == (TIMESTEP * MINUTE);
    }
    
    private boolean isLongPause(int contador)
    {
        return contador == (TIMELONGPAUSE * MINUTE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextStep;
    private javax.swing.JButton btnPlayPause;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStop;
    private javax.swing.JLabel lbStepNumber;
    private javax.swing.JLabel lbStepStatus;
    private javax.swing.JLabel showTimer;
    private javax.swing.JProgressBar stepProgress;
    // End of variables declaration//GEN-END:variables
}
